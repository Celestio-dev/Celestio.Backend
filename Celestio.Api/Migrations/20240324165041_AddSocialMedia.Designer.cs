// <auto-generated />
using System;
using Celestio.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Celestio.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240324165041_AddSocialMedia")]
    partial class AddSocialMedia
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfilePicMediaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePicMediaId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brief", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("BriefDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BriefTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Briefs");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfilePicMediaId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePicMediaId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.CompanyBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CompanyBrands");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Media");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaType = "aaa",
                            MediaUrl = "lasbd url media"
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AgencyAdmin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Creator"
                        },
                        new
                        {
                            Id = 4,
                            Name = "User"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BrandAdmin"
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocId")
                        .HasColumnType("int");

                    b.Property<int>("SocialMediaName")
                        .HasColumnType("int");

                    b.Property<string>("SocialMediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("SocialMediae");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BriefId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<string>("SubmissionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmissionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WatermarkMediaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ProfilePicMediaId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePicMediaId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "teo@teo.com",
                            FirstName = "Teo",
                            LastName = "Ivancevic",
                            PasswordHash = new byte[] { 42, 188, 186, 70, 123, 48, 174, 178, 160, 70, 80, 48, 56, 210, 75, 169, 76, 31, 25, 182, 178, 79, 43, 89, 75, 144, 55, 129, 54, 211, 174, 185, 212, 217, 58, 16, 97, 3, 34, 103, 149, 98, 70, 237, 205, 239, 175, 241, 161, 64, 27, 92, 21, 179, 72, 254, 113, 254, 34, 106, 224, 231, 133, 157 },
                            PasswordSalt = new byte[] { 207, 182, 61, 231, 116, 203, 161, 217, 151, 117, 120, 174, 225, 181, 46, 186, 83, 193, 177, 213, 255, 202, 197, 184, 247, 96, 4, 141, 28, 56, 3, 213, 161, 185, 226, 42, 152, 171, 185, 89, 239, 141, 158, 171, 180, 194, 151, 128, 222, 29, 124, 7, 144, 72, 70, 125, 119, 27, 158, 105, 42, 14, 125, 8, 222, 129, 168, 188, 74, 236, 72, 50, 122, 28, 246, 198, 89, 7, 102, 205, 50, 237, 152, 74, 6, 151, 153, 231, 12, 92, 242, 187, 244, 77, 170, 251, 251, 43, 247, 15, 196, 17, 173, 127, 40, 52, 144, 146, 151, 115, 197, 53, 17, 43, 223, 8, 110, 72, 50, 191, 154, 251, 86, 31, 118, 251, 247, 200 },
                            ProfilePicMediaId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.UserCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserCategories");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brand", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Media", "ProfilePicMedia")
                        .WithMany()
                        .HasForeignKey("ProfilePicMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfilePicMedia");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brief", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Brand", null)
                        .WithMany("Briefs")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Company", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Media", "ProfilePicMedia")
                        .WithMany()
                        .HasForeignKey("ProfilePicMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfilePicMedia");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.SocialMedia", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Brand", null)
                        .WithMany("SocialMediae")
                        .HasForeignKey("BrandId");

                    b.HasOne("Celestio.Api.Data.Entities.Company", null)
                        .WithMany("SocialMediae")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Celestio.Api.Data.Entities.User", null)
                        .WithMany("SocialMediae")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.User", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Media", "ProfilePicMedia")
                        .WithMany()
                        .HasForeignKey("ProfilePicMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celestio.Api.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfilePicMedia");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brand", b =>
                {
                    b.Navigation("Briefs");

                    b.Navigation("SocialMediae");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Company", b =>
                {
                    b.Navigation("SocialMediae");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.User", b =>
                {
                    b.Navigation("SocialMediae");
                });
#pragma warning restore 612, 618
        }
    }
}
