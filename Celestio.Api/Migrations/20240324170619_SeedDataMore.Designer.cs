// <auto-generated />
using System;
using Celestio.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Celestio.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240324170619_SeedDataMore")]
    partial class SeedDataMore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfilePicMediaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePicMediaId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brief", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("BriefDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BriefTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Briefs");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfilePicMediaId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePicMediaId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyDescription = "Celestio Content description woo",
                            CompanyName = "Celestio",
                            ContactEmail = "celestio.dev@gmail.com",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfilePicMediaId = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            CompanyDescription = "Agencija 404 za kreatore",
                            CompanyName = "Agency 404",
                            ContactEmail = "contact@404.com",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfilePicMediaId = 1,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.CompanyBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CompanyBrands");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BriefId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BriefId");

                    b.ToTable("Media");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaType = "aaa",
                            MediaUrl = "lasbd url media"
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AgencyAdmin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Creator"
                        },
                        new
                        {
                            Id = 4,
                            Name = "User"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BrandAdmin"
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocId")
                        .HasColumnType("int");

                    b.Property<int>("SocialMediaName")
                        .HasColumnType("int");

                    b.Property<string>("SocialMediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("SocialMediae");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BriefId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<string>("SubmissionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmissionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WatermarkMediaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ProfilePicMediaId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProfilePicMediaId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "teo@teo.com",
                            FirstName = "Teo",
                            LastName = "Ivančević (č, ć, dž, đ, š, ž)",
                            PasswordHash = new byte[] { 2, 202, 149, 236, 59, 10, 177, 248, 231, 153, 2, 81, 226, 125, 241, 9, 103, 37, 43, 105, 21, 142, 1, 190, 244, 77, 114, 104, 247, 52, 180, 98, 167, 141, 8, 75, 23, 68, 240, 82, 147, 113, 192, 126, 140, 64, 201, 88, 165, 126, 141, 233, 1, 178, 149, 56, 25, 143, 97, 179, 198, 155, 140, 191 },
                            PasswordSalt = new byte[] { 6, 86, 100, 247, 245, 0, 206, 217, 101, 56, 160, 255, 170, 84, 175, 110, 68, 82, 108, 79, 133, 156, 136, 217, 97, 94, 104, 154, 140, 44, 176, 158, 35, 67, 34, 169, 43, 169, 127, 220, 65, 50, 166, 90, 238, 250, 97, 230, 41, 138, 181, 96, 79, 215, 218, 17, 20, 19, 155, 119, 75, 246, 27, 115, 84, 51, 89, 233, 231, 185, 47, 218, 66, 68, 88, 153, 197, 243, 201, 36, 127, 176, 225, 208, 163, 87, 180, 128, 147, 53, 145, 252, 246, 85, 71, 249, 155, 150, 122, 224, 117, 78, 3, 154, 144, 203, 9, 182, 151, 35, 209, 154, 28, 130, 114, 116, 37, 94, 205, 30, 32, 209, 29, 133, 18, 177, 177, 40 },
                            ProfilePicMediaId = 1,
                            RoleId = 1,
                            UserDescription = "Ja sam teo bla bla"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "leonarda@404.com",
                            FirstName = "Leonarda",
                            LastName = "Lovrić",
                            PasswordHash = new byte[] { 57, 11, 176, 82, 193, 74, 240, 166, 60, 154, 17, 80, 11, 69, 62, 103, 192, 196, 217, 133, 243, 200, 139, 12, 113, 107, 4, 114, 53, 69, 83, 30, 147, 142, 221, 51, 239, 196, 82, 175, 245, 7, 152, 25, 214, 155, 49, 97, 185, 253, 192, 130, 92, 11, 122, 120, 20, 188, 53, 79, 7, 113, 182, 105 },
                            PasswordSalt = new byte[] { 131, 213, 127, 241, 168, 233, 129, 164, 0, 88, 207, 247, 46, 81, 131, 217, 212, 185, 163, 41, 180, 159, 150, 214, 221, 207, 162, 73, 1, 162, 126, 248, 157, 214, 125, 93, 242, 164, 128, 164, 51, 10, 4, 73, 62, 15, 181, 65, 162, 55, 34, 82, 77, 188, 109, 76, 172, 210, 157, 236, 29, 113, 75, 106, 196, 42, 162, 172, 232, 203, 246, 208, 151, 140, 241, 40, 167, 78, 209, 157, 100, 52, 36, 60, 249, 64, 30, 54, 210, 109, 88, 131, 145, 148, 67, 130, 46, 53, 231, 159, 239, 21, 130, 20, 138, 127, 95, 85, 132, 53, 130, 69, 73, 159, 155, 21, 46, 170, 175, 87, 190, 66, 243, 156, 157, 29, 136, 31 },
                            ProfilePicMediaId = 1,
                            RoleId = 2,
                            UserDescription = "Ja sam leonarda bla bla"
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.UserCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserCategories");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brand", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Media", "ProfilePicMedia")
                        .WithMany()
                        .HasForeignKey("ProfilePicMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfilePicMedia");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brief", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Brand", "Brand")
                        .WithMany("Briefs")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Company", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Media", "ProfilePicMedia")
                        .WithMany()
                        .HasForeignKey("ProfilePicMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfilePicMedia");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Media", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Brief", null)
                        .WithMany("Mediae")
                        .HasForeignKey("BriefId");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.SocialMedia", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Brand", null)
                        .WithMany("SocialMediae")
                        .HasForeignKey("BrandId");

                    b.HasOne("Celestio.Api.Data.Entities.Company", null)
                        .WithMany("SocialMediae")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Celestio.Api.Data.Entities.User", null)
                        .WithMany("SocialMediae")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.User", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celestio.Api.Data.Entities.Media", "ProfilePicMedia")
                        .WithMany()
                        .HasForeignKey("ProfilePicMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celestio.Api.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ProfilePicMedia");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brand", b =>
                {
                    b.Navigation("Briefs");

                    b.Navigation("SocialMediae");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brief", b =>
                {
                    b.Navigation("Mediae");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Company", b =>
                {
                    b.Navigation("SocialMediae");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.User", b =>
                {
                    b.Navigation("SocialMediae");
                });
#pragma warning restore 612, 618
        }
    }
}
