// <auto-generated />
using System;
using Celestio.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Celestio.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfilePicMediaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProfilePicMediaId")
                        .IsUnique();

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brief", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("BriefDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BriefTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Briefs");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfilePicMediaId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePicMediaId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyDescription = "Celestio Content description woo",
                            CompanyName = "Celestio",
                            ContactEmail = "celestio.dev@gmail.com",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfilePicMediaId = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            CompanyDescription = "Agencija 404 za kreatore",
                            CompanyName = "Agency 404",
                            ContactEmail = "contact@404.com",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfilePicMediaId = 1,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.CompanyBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CompanyBrands");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BriefId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BriefId");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 3, 31, 17, 8, 43, 364, DateTimeKind.Local).AddTicks(9310),
                            MediaType = "aaa",
                            MediaUrl = "lasbd url media"
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AgencyAdmin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Creator"
                        },
                        new
                        {
                            Id = 4,
                            Name = "User"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BrandAdmin"
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 31, 15, 8, 43, 364, DateTimeKind.Utc).AddTicks(8660));

                    b.Property<int>("DocId")
                        .HasColumnType("int");

                    b.Property<int>("SocialMediaName")
                        .HasColumnType("int");

                    b.Property<string>("SocialMediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMediaUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("SocialMedia", (string)null);
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BriefId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<string>("SubmissionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmissionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WatermarkMediaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ProfilePicMediaId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProfilePicMediaId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Email = "teo@teo.com",
                            FirstName = "Teo",
                            LastName = "Ivančević (č, ć, dž, đ, š, ž)",
                            PasswordHash = new byte[] { 153, 102, 69, 8, 21, 201, 169, 109, 9, 126, 187, 43, 54, 82, 159, 106, 62, 94, 133, 138, 199, 84, 26, 4, 99, 118, 0, 39, 63, 37, 191, 80, 91, 210, 97, 254, 196, 136, 191, 7, 153, 232, 52, 162, 26, 213, 126, 69, 22, 39, 233, 40, 93, 234, 233, 94, 17, 101, 140, 45, 22, 103, 145, 71 },
                            PasswordSalt = new byte[] { 50, 119, 47, 17, 227, 52, 25, 147, 129, 27, 215, 178, 254, 99, 77, 168, 214, 195, 146, 238, 101, 33, 42, 57, 218, 28, 171, 143, 28, 127, 37, 179, 114, 181, 135, 69, 63, 135, 89, 188, 105, 34, 85, 15, 188, 187, 72, 137, 84, 252, 147, 237, 163, 233, 89, 115, 242, 26, 22, 246, 179, 23, 163, 125, 188, 26, 178, 49, 224, 18, 148, 109, 57, 166, 30, 156, 105, 180, 227, 248, 185, 254, 99, 118, 62, 54, 86, 236, 242, 5, 97, 92, 29, 18, 73, 191, 21, 95, 218, 75, 21, 54, 137, 229, 78, 246, 86, 130, 85, 35, 210, 221, 120, 177, 36, 35, 201, 125, 152, 173, 7, 199, 126, 158, 220, 147, 87, 22 },
                            ProfilePicMediaId = 1,
                            RoleId = 1,
                            UserDescription = "Ja sam teo bla bla"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            Email = "leonarda@404.com",
                            FirstName = "Leonarda",
                            LastName = "Lovrić",
                            PasswordHash = new byte[] { 122, 103, 21, 224, 82, 147, 198, 7, 7, 236, 25, 168, 109, 59, 194, 160, 107, 203, 126, 241, 52, 123, 110, 121, 232, 248, 171, 159, 98, 161, 141, 212, 178, 59, 123, 235, 9, 238, 248, 82, 148, 33, 219, 73, 208, 92, 185, 84, 181, 46, 118, 73, 17, 251, 61, 8, 112, 182, 149, 248, 67, 32, 231, 213 },
                            PasswordSalt = new byte[] { 10, 210, 89, 106, 253, 27, 163, 15, 237, 102, 239, 28, 29, 178, 138, 32, 106, 23, 222, 167, 47, 64, 18, 94, 49, 111, 159, 203, 36, 56, 230, 124, 53, 226, 20, 166, 254, 235, 59, 251, 231, 21, 13, 63, 93, 92, 4, 170, 240, 12, 241, 81, 41, 140, 227, 35, 127, 244, 93, 57, 228, 245, 126, 138, 149, 151, 115, 169, 9, 130, 122, 218, 20, 73, 221, 233, 108, 116, 8, 78, 166, 47, 106, 105, 164, 183, 129, 74, 84, 196, 194, 218, 165, 65, 27, 246, 242, 188, 80, 186, 101, 166, 12, 49, 74, 73, 28, 1, 255, 86, 209, 29, 249, 14, 248, 250, 207, 72, 55, 247, 217, 128, 134, 51, 55, 184, 106, 246 },
                            ProfilePicMediaId = 1,
                            RoleId = 2,
                            UserDescription = "Ja sam leonarda bla bla"
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.UserCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserCategories");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brand", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Company", "Company")
                        .WithMany("Brands")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celestio.Api.Data.Entities.Media", "ProfilePicMedia")
                        .WithOne("Brand")
                        .HasForeignKey("Celestio.Api.Data.Entities.Brand", "ProfilePicMediaId");

                    b.Navigation("Company");

                    b.Navigation("ProfilePicMedia");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brief", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Brand", "Brand")
                        .WithMany("Briefs")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Company", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Media", "ProfilePicMedia")
                        .WithMany()
                        .HasForeignKey("ProfilePicMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfilePicMedia");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Media", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Brief", null)
                        .WithMany("Mediae")
                        .HasForeignKey("BriefId");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.SocialMedia", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Brand", null)
                        .WithMany("SocialMediae")
                        .HasForeignKey("BrandId");

                    b.HasOne("Celestio.Api.Data.Entities.Company", null)
                        .WithMany("SocialMediae")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Celestio.Api.Data.Entities.User", null)
                        .WithMany("SocialMediae")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.User", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celestio.Api.Data.Entities.Media", "ProfilePicMedia")
                        .WithMany()
                        .HasForeignKey("ProfilePicMediaId");

                    b.HasOne("Celestio.Api.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ProfilePicMedia");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brand", b =>
                {
                    b.Navigation("Briefs");

                    b.Navigation("SocialMediae");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brief", b =>
                {
                    b.Navigation("Mediae");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Company", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("SocialMediae");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Media", b =>
                {
                    b.Navigation("Brand")
                        .IsRequired();
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.User", b =>
                {
                    b.Navigation("SocialMediae");
                });
#pragma warning restore 612, 618
        }
    }
}
