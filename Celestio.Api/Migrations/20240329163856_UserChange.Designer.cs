// <auto-generated />
using System;
using Celestio.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Celestio.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240329163856_UserChange")]
    partial class UserChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfilePicMediaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePicMediaId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brief", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("BriefDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BriefTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Briefs");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfilePicMediaId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePicMediaId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyDescription = "Celestio Content description woo",
                            CompanyName = "Celestio",
                            ContactEmail = "celestio.dev@gmail.com",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfilePicMediaId = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            CompanyDescription = "Agencija 404 za kreatore",
                            CompanyName = "Agency 404",
                            ContactEmail = "contact@404.com",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfilePicMediaId = 1,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.CompanyBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CompanyBrands");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BriefId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BriefId");

                    b.ToTable("Media");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaType = "aaa",
                            MediaUrl = "lasbd url media"
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AgencyAdmin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Creator"
                        },
                        new
                        {
                            Id = 4,
                            Name = "User"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BrandAdmin"
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocId")
                        .HasColumnType("int");

                    b.Property<int>("SocialMediaName")
                        .HasColumnType("int");

                    b.Property<string>("SocialMediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("SocialMediae");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BriefId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<string>("SubmissionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmissionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WatermarkMediaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ProfilePicMediaId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProfilePicMediaId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Email = "teo@teo.com",
                            FirstName = "Teo",
                            LastName = "Ivančević (č, ć, dž, đ, š, ž)",
                            PasswordHash = new byte[] { 11, 214, 102, 157, 173, 184, 236, 215, 227, 128, 128, 88, 1, 92, 134, 210, 76, 58, 221, 73, 69, 76, 197, 204, 230, 114, 235, 195, 33, 142, 139, 92, 5, 254, 242, 3, 64, 244, 245, 60, 92, 123, 121, 130, 199, 233, 172, 98, 178, 86, 155, 161, 117, 160, 110, 255, 207, 215, 83, 129, 77, 114, 45, 220 },
                            PasswordSalt = new byte[] { 83, 226, 187, 63, 47, 245, 119, 69, 89, 137, 120, 126, 52, 175, 69, 250, 159, 253, 76, 195, 54, 56, 219, 206, 89, 8, 15, 41, 121, 248, 111, 5, 51, 148, 40, 207, 9, 196, 172, 225, 35, 4, 22, 223, 10, 185, 69, 71, 17, 206, 175, 78, 254, 165, 244, 77, 204, 255, 43, 86, 45, 132, 89, 157, 224, 167, 215, 105, 53, 225, 202, 212, 36, 81, 185, 176, 176, 174, 101, 143, 187, 232, 130, 68, 62, 217, 30, 150, 232, 249, 40, 201, 12, 165, 223, 121, 151, 68, 128, 189, 234, 82, 225, 186, 227, 155, 166, 91, 229, 56, 220, 213, 207, 254, 74, 54, 134, 126, 45, 164, 153, 129, 141, 143, 97, 71, 244, 239 },
                            ProfilePicMediaId = 1,
                            RoleId = 1,
                            UserDescription = "Ja sam teo bla bla"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            Email = "leonarda@404.com",
                            FirstName = "Leonarda",
                            LastName = "Lovrić",
                            PasswordHash = new byte[] { 68, 63, 174, 59, 254, 110, 126, 90, 37, 130, 175, 208, 231, 81, 88, 150, 80, 23, 253, 69, 117, 77, 238, 91, 213, 136, 161, 198, 44, 86, 145, 223, 4, 76, 95, 209, 182, 55, 65, 254, 146, 194, 162, 136, 84, 220, 177, 121, 219, 126, 139, 182, 187, 129, 195, 236, 237, 69, 192, 44, 13, 121, 239, 57 },
                            PasswordSalt = new byte[] { 252, 132, 84, 115, 232, 148, 3, 147, 153, 188, 126, 254, 153, 105, 252, 99, 63, 190, 5, 172, 29, 55, 84, 49, 167, 62, 179, 238, 96, 123, 98, 5, 178, 3, 78, 138, 237, 86, 69, 239, 48, 128, 19, 154, 232, 244, 60, 92, 239, 156, 178, 181, 173, 169, 113, 222, 57, 152, 116, 192, 20, 31, 234, 183, 128, 84, 238, 73, 217, 156, 174, 149, 93, 22, 153, 178, 141, 81, 200, 8, 109, 8, 8, 122, 132, 216, 199, 75, 179, 125, 204, 161, 91, 237, 107, 138, 53, 111, 244, 84, 104, 153, 104, 41, 29, 18, 152, 202, 220, 130, 9, 253, 254, 82, 72, 247, 210, 19, 160, 135, 172, 189, 142, 155, 203, 85, 100, 73 },
                            ProfilePicMediaId = 1,
                            RoleId = 2,
                            UserDescription = "Ja sam leonarda bla bla"
                        });
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.UserCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserCategories");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brand", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Media", "ProfilePicMedia")
                        .WithMany()
                        .HasForeignKey("ProfilePicMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfilePicMedia");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brief", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Brand", "Brand")
                        .WithMany("Briefs")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Company", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Media", "ProfilePicMedia")
                        .WithMany()
                        .HasForeignKey("ProfilePicMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfilePicMedia");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Media", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Brief", null)
                        .WithMany("Mediae")
                        .HasForeignKey("BriefId");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.SocialMedia", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Brand", null)
                        .WithMany("SocialMediae")
                        .HasForeignKey("BrandId");

                    b.HasOne("Celestio.Api.Data.Entities.Company", null)
                        .WithMany("SocialMediae")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Celestio.Api.Data.Entities.User", null)
                        .WithMany("SocialMediae")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.User", b =>
                {
                    b.HasOne("Celestio.Api.Data.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celestio.Api.Data.Entities.Media", "ProfilePicMedia")
                        .WithMany()
                        .HasForeignKey("ProfilePicMediaId");

                    b.HasOne("Celestio.Api.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ProfilePicMedia");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brand", b =>
                {
                    b.Navigation("Briefs");

                    b.Navigation("SocialMediae");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Brief", b =>
                {
                    b.Navigation("Mediae");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Company", b =>
                {
                    b.Navigation("SocialMediae");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Celestio.Api.Data.Entities.User", b =>
                {
                    b.Navigation("SocialMediae");
                });
#pragma warning restore 612, 618
        }
    }
}
